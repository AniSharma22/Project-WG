// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\anisharma\GolandProjects\goprac\Project-WG\play-hub\internal\domain\interfaces\leaderboard_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "project2/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockLeaderboardRepository is a mock of LeaderboardRepository interface.
type MockLeaderboardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardRepositoryMockRecorder
}

// MockLeaderboardRepositoryMockRecorder is the mock recorder for MockLeaderboardRepository.
type MockLeaderboardRepositoryMockRecorder struct {
	mock *MockLeaderboardRepository
}

// NewMockLeaderboardRepository creates a new mock instance.
func NewMockLeaderboardRepository(ctrl *gomock.Controller) *MockLeaderboardRepository {
	mock := &MockLeaderboardRepository{ctrl: ctrl}
	mock.recorder = &MockLeaderboardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardRepository) EXPECT() *MockLeaderboardRepositoryMockRecorder {
	return m.recorder
}

// AddOrUpdateLeaderboardEntry mocks base method.
func (m *MockLeaderboardRepository) AddOrUpdateLeaderboardEntry(entry *entities.Leaderboard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateLeaderboardEntry", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateLeaderboardEntry indicates an expected call of AddOrUpdateLeaderboardEntry.
func (mr *MockLeaderboardRepositoryMockRecorder) AddOrUpdateLeaderboardEntry(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateLeaderboardEntry", reflect.TypeOf((*MockLeaderboardRepository)(nil).AddOrUpdateLeaderboardEntry), entry)
}

// GetGameLeaderboard mocks base method.
func (m *MockLeaderboardRepository) GetGameLeaderboard(gameId primitive.ObjectID) ([]entities.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameLeaderboard", gameId)
	ret0, _ := ret[0].([]entities.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameLeaderboard indicates an expected call of GetGameLeaderboard.
func (mr *MockLeaderboardRepositoryMockRecorder) GetGameLeaderboard(gameId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameLeaderboard", reflect.TypeOf((*MockLeaderboardRepository)(nil).GetGameLeaderboard), gameId)
}

// GetOverallLeaderboard mocks base method.
func (m *MockLeaderboardRepository) GetOverallLeaderboard() ([]entities.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverallLeaderboard")
	ret0, _ := ret[0].([]entities.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverallLeaderboard indicates an expected call of GetOverallLeaderboard.
func (mr *MockLeaderboardRepositoryMockRecorder) GetOverallLeaderboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverallLeaderboard", reflect.TypeOf((*MockLeaderboardRepository)(nil).GetOverallLeaderboard))
}
