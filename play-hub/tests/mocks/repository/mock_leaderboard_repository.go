// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dell\projects2\watchguard-proj\Project-WG\play-hub\internal\domain\interfaces\repository\leaderboard_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "project2/internal/domain/entities"
	models "project2/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLeaderboardRepository is a mock of LeaderboardRepository interface.
type MockLeaderboardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardRepositoryMockRecorder
}

// MockLeaderboardRepositoryMockRecorder is the mock recorder for MockLeaderboardRepository.
type MockLeaderboardRepositoryMockRecorder struct {
	mock *MockLeaderboardRepository
}

// NewMockLeaderboardRepository creates a new mock instance.
func NewMockLeaderboardRepository(ctrl *gomock.Controller) *MockLeaderboardRepository {
	mock := &MockLeaderboardRepository{ctrl: ctrl}
	mock.recorder = &MockLeaderboardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardRepository) EXPECT() *MockLeaderboardRepositoryMockRecorder {
	return m.recorder
}

// FetchGameLeaderboard mocks base method.
func (m *MockLeaderboardRepository) FetchGameLeaderboard(ctx context.Context, gameID uuid.UUID) ([]models.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGameLeaderboard", ctx, gameID)
	ret0, _ := ret[0].([]models.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGameLeaderboard indicates an expected call of FetchGameLeaderboard.
func (mr *MockLeaderboardRepositoryMockRecorder) FetchGameLeaderboard(ctx, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGameLeaderboard", reflect.TypeOf((*MockLeaderboardRepository)(nil).FetchGameLeaderboard), ctx, gameID)
}

// FetchUserGameStats mocks base method.
func (m *MockLeaderboardRepository) FetchUserGameStats(ctx context.Context, userID, gameID uuid.UUID) (*entities.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserGameStats", ctx, userID, gameID)
	ret0, _ := ret[0].(*entities.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserGameStats indicates an expected call of FetchUserGameStats.
func (mr *MockLeaderboardRepositoryMockRecorder) FetchUserGameStats(ctx, userID, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserGameStats", reflect.TypeOf((*MockLeaderboardRepository)(nil).FetchUserGameStats), ctx, userID, gameID)
}

// FetchUserOverallStats mocks base method.
func (m *MockLeaderboardRepository) FetchUserOverallStats(ctx context.Context, userID uuid.UUID) ([]entities.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserOverallStats", ctx, userID)
	ret0, _ := ret[0].([]entities.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserOverallStats indicates an expected call of FetchUserOverallStats.
func (mr *MockLeaderboardRepositoryMockRecorder) FetchUserOverallStats(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserOverallStats", reflect.TypeOf((*MockLeaderboardRepository)(nil).FetchUserOverallStats), ctx, userID)
}

// UpdateUserGameStats mocks base method.
func (m *MockLeaderboardRepository) UpdateUserGameStats(ctx context.Context, leaderboard *entities.Leaderboard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserGameStats", ctx, leaderboard)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserGameStats indicates an expected call of UpdateUserGameStats.
func (mr *MockLeaderboardRepositoryMockRecorder) UpdateUserGameStats(ctx, leaderboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGameStats", reflect.TypeOf((*MockLeaderboardRepository)(nil).UpdateUserGameStats), ctx, leaderboard)
}
