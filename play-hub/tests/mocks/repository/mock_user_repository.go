// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dell\projects2\watchguard-proj\Project-WG\play-hub\internal\domain\interfaces\repository\user_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "project2/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *entities.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// EmailAlreadyExists mocks base method.
func (m *MockUserRepository) EmailAlreadyExists(ctx context.Context, email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailAlreadyExists", ctx, email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EmailAlreadyExists indicates an expected call of EmailAlreadyExists.
func (mr *MockUserRepositoryMockRecorder) EmailAlreadyExists(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailAlreadyExists", reflect.TypeOf((*MockUserRepository)(nil).EmailAlreadyExists), ctx, email)
}

// FetchAllUsers mocks base method.
func (m *MockUserRepository) FetchAllUsers(ctx context.Context) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllUsers", ctx)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllUsers indicates an expected call of FetchAllUsers.
func (mr *MockUserRepositoryMockRecorder) FetchAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllUsers", reflect.TypeOf((*MockUserRepository)(nil).FetchAllUsers), ctx)
}

// FetchUserByEmail mocks base method.
func (m *MockUserRepository) FetchUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByEmail indicates an expected call of FetchUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FetchUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByEmail), ctx, email)
}

// FetchUserById mocks base method.
func (m *MockUserRepository) FetchUserById(ctx context.Context, id uuid.UUID) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserById", ctx, id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserById indicates an expected call of FetchUserById.
func (mr *MockUserRepositoryMockRecorder) FetchUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserById", reflect.TypeOf((*MockUserRepository)(nil).FetchUserById), ctx, id)
}

// FetchUserByUsername mocks base method.
func (m *MockUserRepository) FetchUserByUsername(ctx context.Context, username string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByUsername", ctx, username)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByUsername indicates an expected call of FetchUserByUsername.
func (mr *MockUserRepositoryMockRecorder) FetchUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByUsername), ctx, username)
}
