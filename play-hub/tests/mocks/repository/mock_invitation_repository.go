// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dell\projects2\watchguard-proj\Project-WG\play-hub\internal\domain\interfaces\repository\invitation_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "project2/internal/domain/entities"
	models "project2/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockInvitationRepository is a mock of InvitationRepository interface.
type MockInvitationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationRepositoryMockRecorder
}

// MockInvitationRepositoryMockRecorder is the mock recorder for MockInvitationRepository.
type MockInvitationRepositoryMockRecorder struct {
	mock *MockInvitationRepository
}

// NewMockInvitationRepository creates a new mock instance.
func NewMockInvitationRepository(ctrl *gomock.Controller) *MockInvitationRepository {
	mock := &MockInvitationRepository{ctrl: ctrl}
	mock.recorder = &MockInvitationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitationRepository) EXPECT() *MockInvitationRepositoryMockRecorder {
	return m.recorder
}

// CreateInvitation mocks base method.
func (m *MockInvitationRepository) CreateInvitation(ctx context.Context, invitation *entities.Invitation) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", ctx, invitation)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockInvitationRepositoryMockRecorder) CreateInvitation(ctx, invitation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockInvitationRepository)(nil).CreateInvitation), ctx, invitation)
}

// DeleteInvitationByID mocks base method.
func (m *MockInvitationRepository) DeleteInvitationByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitationByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvitationByID indicates an expected call of DeleteInvitationByID.
func (mr *MockInvitationRepositoryMockRecorder) DeleteInvitationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationByID", reflect.TypeOf((*MockInvitationRepository)(nil).DeleteInvitationByID), ctx, id)
}

// FetchInvitationByID mocks base method.
func (m *MockInvitationRepository) FetchInvitationByID(ctx context.Context, id uuid.UUID) (*entities.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvitationByID", ctx, id)
	ret0, _ := ret[0].(*entities.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInvitationByID indicates an expected call of FetchInvitationByID.
func (mr *MockInvitationRepositoryMockRecorder) FetchInvitationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvitationByID", reflect.TypeOf((*MockInvitationRepository)(nil).FetchInvitationByID), ctx, id)
}

// FetchInvitationByUserAndSlot mocks base method.
func (m *MockInvitationRepository) FetchInvitationByUserAndSlot(ctx context.Context, invitingUserID, invitedUserID, slotID uuid.UUID) (*entities.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInvitationByUserAndSlot", ctx, invitingUserID, invitedUserID, slotID)
	ret0, _ := ret[0].(*entities.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInvitationByUserAndSlot indicates an expected call of FetchInvitationByUserAndSlot.
func (mr *MockInvitationRepositoryMockRecorder) FetchInvitationByUserAndSlot(ctx, invitingUserID, invitedUserID, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInvitationByUserAndSlot", reflect.TypeOf((*MockInvitationRepository)(nil).FetchInvitationByUserAndSlot), ctx, invitingUserID, invitedUserID, slotID)
}

// FetchUserInvitations mocks base method.
func (m *MockInvitationRepository) FetchUserInvitations(ctx context.Context, userID uuid.UUID) ([]entities.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserInvitations", ctx, userID)
	ret0, _ := ret[0].([]entities.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserInvitations indicates an expected call of FetchUserInvitations.
func (mr *MockInvitationRepositoryMockRecorder) FetchUserInvitations(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserInvitations", reflect.TypeOf((*MockInvitationRepository)(nil).FetchUserInvitations), ctx, userID)
}

// FetchUserPendingInvitations mocks base method.
func (m *MockInvitationRepository) FetchUserPendingInvitations(ctx context.Context, userID uuid.UUID) ([]models.Invitations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserPendingInvitations", ctx, userID)
	ret0, _ := ret[0].([]models.Invitations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserPendingInvitations indicates an expected call of FetchUserPendingInvitations.
func (mr *MockInvitationRepositoryMockRecorder) FetchUserPendingInvitations(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserPendingInvitations", reflect.TypeOf((*MockInvitationRepository)(nil).FetchUserPendingInvitations), ctx, userID)
}

// UpdateInvitationStatus mocks base method.
func (m *MockInvitationRepository) UpdateInvitationStatus(ctx context.Context, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvitationStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvitationStatus indicates an expected call of UpdateInvitationStatus.
func (mr *MockInvitationRepositoryMockRecorder) UpdateInvitationStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvitationStatus", reflect.TypeOf((*MockInvitationRepository)(nil).UpdateInvitationStatus), ctx, id, status)
}
