// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dell\projects2\watchguard-proj\Project-WG\play-hub\internal\domain\interfaces\repository\slot_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "project2/internal/domain/entities"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSlotRepository is a mock of SlotRepository interface.
type MockSlotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSlotRepositoryMockRecorder
}

// MockSlotRepositoryMockRecorder is the mock recorder for MockSlotRepository.
type MockSlotRepositoryMockRecorder struct {
	mock *MockSlotRepository
}

// NewMockSlotRepository creates a new mock instance.
func NewMockSlotRepository(ctrl *gomock.Controller) *MockSlotRepository {
	mock := &MockSlotRepository{ctrl: ctrl}
	mock.recorder = &MockSlotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlotRepository) EXPECT() *MockSlotRepositoryMockRecorder {
	return m.recorder
}

// CreateSlot mocks base method.
func (m *MockSlotRepository) CreateSlot(ctx context.Context, slot *entities.Slot) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlot", ctx, slot)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlot indicates an expected call of CreateSlot.
func (mr *MockSlotRepositoryMockRecorder) CreateSlot(ctx, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlot", reflect.TypeOf((*MockSlotRepository)(nil).CreateSlot), ctx, slot)
}

// DeleteSlotByID mocks base method.
func (m *MockSlotRepository) DeleteSlotByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlotByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSlotByID indicates an expected call of DeleteSlotByID.
func (mr *MockSlotRepositoryMockRecorder) DeleteSlotByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlotByID", reflect.TypeOf((*MockSlotRepository)(nil).DeleteSlotByID), ctx, id)
}

// FetchSlotByDateAndTime mocks base method.
func (m *MockSlotRepository) FetchSlotByDateAndTime(ctx context.Context, date, startTime time.Time) (*entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSlotByDateAndTime", ctx, date, startTime)
	ret0, _ := ret[0].(*entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSlotByDateAndTime indicates an expected call of FetchSlotByDateAndTime.
func (mr *MockSlotRepositoryMockRecorder) FetchSlotByDateAndTime(ctx, date, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSlotByDateAndTime", reflect.TypeOf((*MockSlotRepository)(nil).FetchSlotByDateAndTime), ctx, date, startTime)
}

// FetchSlotByID mocks base method.
func (m *MockSlotRepository) FetchSlotByID(ctx context.Context, id uuid.UUID) (*entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSlotByID", ctx, id)
	ret0, _ := ret[0].(*entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSlotByID indicates an expected call of FetchSlotByID.
func (mr *MockSlotRepositoryMockRecorder) FetchSlotByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSlotByID", reflect.TypeOf((*MockSlotRepository)(nil).FetchSlotByID), ctx, id)
}

// FetchSlotsByDate mocks base method.
func (m *MockSlotRepository) FetchSlotsByDate(ctx context.Context, date time.Time) ([]entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSlotsByDate", ctx, date)
	ret0, _ := ret[0].([]entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSlotsByDate indicates an expected call of FetchSlotsByDate.
func (mr *MockSlotRepositoryMockRecorder) FetchSlotsByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSlotsByDate", reflect.TypeOf((*MockSlotRepository)(nil).FetchSlotsByDate), ctx, date)
}

// FetchSlotsByGameID mocks base method.
func (m *MockSlotRepository) FetchSlotsByGameID(ctx context.Context, gameID uuid.UUID) ([]entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSlotsByGameID", ctx, gameID)
	ret0, _ := ret[0].([]entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSlotsByGameID indicates an expected call of FetchSlotsByGameID.
func (mr *MockSlotRepositoryMockRecorder) FetchSlotsByGameID(ctx, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSlotsByGameID", reflect.TypeOf((*MockSlotRepository)(nil).FetchSlotsByGameID), ctx, gameID)
}

// FetchSlotsByGameIDAndDate mocks base method.
func (m *MockSlotRepository) FetchSlotsByGameIDAndDate(ctx context.Context, gameID uuid.UUID, date time.Time) ([]entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSlotsByGameIDAndDate", ctx, gameID, date)
	ret0, _ := ret[0].([]entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSlotsByGameIDAndDate indicates an expected call of FetchSlotsByGameIDAndDate.
func (mr *MockSlotRepositoryMockRecorder) FetchSlotsByGameIDAndDate(ctx, gameID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSlotsByGameIDAndDate", reflect.TypeOf((*MockSlotRepository)(nil).FetchSlotsByGameIDAndDate), ctx, gameID, date)
}

// UpdateSlotStatus mocks base method.
func (m *MockSlotRepository) UpdateSlotStatus(ctx context.Context, slotID uuid.UUID, isBooked bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlotStatus", ctx, slotID, isBooked)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSlotStatus indicates an expected call of UpdateSlotStatus.
func (mr *MockSlotRepositoryMockRecorder) UpdateSlotStatus(ctx, slotID, isBooked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlotStatus", reflect.TypeOf((*MockSlotRepository)(nil).UpdateSlotStatus), ctx, slotID, isBooked)
}
