// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\anisharma\GolandProjects\goprac\Project-WG\play-hub\internal\domain\interfaces\slot_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "project2/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockSlotService is a mock of SlotService interface.
type MockSlotService struct {
	ctrl     *gomock.Controller
	recorder *MockSlotServiceMockRecorder
}

// MockSlotServiceMockRecorder is the mock recorder for MockSlotService.
type MockSlotServiceMockRecorder struct {
	mock *MockSlotService
}

// NewMockSlotService creates a new mock instance.
func NewMockSlotService(ctrl *gomock.Controller) *MockSlotService {
	mock := &MockSlotService{ctrl: ctrl}
	mock.recorder = &MockSlotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlotService) EXPECT() *MockSlotServiceMockRecorder {
	return m.recorder
}

// AddResultToSlot mocks base method.
func (m *MockSlotService) AddResultToSlot(userId, slotId primitive.ObjectID, result string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResultToSlot", userId, slotId, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResultToSlot indicates an expected call of AddResultToSlot.
func (mr *MockSlotServiceMockRecorder) AddResultToSlot(userId, slotId, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResultToSlot", reflect.TypeOf((*MockSlotService)(nil).AddResultToSlot), userId, slotId, result)
}

// BookSlot mocks base method.
func (m *MockSlotService) BookSlot(game *entities.Game, slot *entities.Slot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookSlot", game, slot)
	ret0, _ := ret[0].(error)
	return ret0
}

// BookSlot indicates an expected call of BookSlot.
func (mr *MockSlotServiceMockRecorder) BookSlot(game, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookSlot", reflect.TypeOf((*MockSlotService)(nil).BookSlot), game, slot)
}

// GetGameSlots mocks base method.
func (m *MockSlotService) GetGameSlots(game *entities.Game) ([]entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameSlots", game)
	ret0, _ := ret[0].([]entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameSlots indicates an expected call of GetGameSlots.
func (mr *MockSlotServiceMockRecorder) GetGameSlots(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameSlots", reflect.TypeOf((*MockSlotService)(nil).GetGameSlots), game)
}

// GetSlotById mocks base method.
func (m *MockSlotService) GetSlotById(slotId primitive.ObjectID) (*entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotById", slotId)
	ret0, _ := ret[0].(*entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotById indicates an expected call of GetSlotById.
func (mr *MockSlotServiceMockRecorder) GetSlotById(slotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotById", reflect.TypeOf((*MockSlotService)(nil).GetSlotById), slotId)
}

// GetUpcomingBookedSlots mocks base method.
func (m *MockSlotService) GetUpcomingBookedSlots() ([]entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingBookedSlots")
	ret0, _ := ret[0].([]entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingBookedSlots indicates an expected call of GetUpcomingBookedSlots.
func (mr *MockSlotServiceMockRecorder) GetUpcomingBookedSlots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingBookedSlots", reflect.TypeOf((*MockSlotService)(nil).GetUpcomingBookedSlots))
}

// InviteToSlot mocks base method.
func (m *MockSlotService) InviteToSlot(userId primitive.ObjectID, game *entities.Game, slot *entities.Slot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteToSlot", userId, game, slot)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteToSlot indicates an expected call of InviteToSlot.
func (mr *MockSlotServiceMockRecorder) InviteToSlot(userId, game, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteToSlot", reflect.TypeOf((*MockSlotService)(nil).InviteToSlot), userId, game, slot)
}
