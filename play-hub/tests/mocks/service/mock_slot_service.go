// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dell\projects2\watchguard-proj\Project-WG\play-hub\internal\domain\interfaces\service\slot_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "project2/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSlotService is a mock of SlotService interface.
type MockSlotService struct {
	ctrl     *gomock.Controller
	recorder *MockSlotServiceMockRecorder
}

// MockSlotServiceMockRecorder is the mock recorder for MockSlotService.
type MockSlotServiceMockRecorder struct {
	mock *MockSlotService
}

// NewMockSlotService creates a new mock instance.
func NewMockSlotService(ctrl *gomock.Controller) *MockSlotService {
	mock := &MockSlotService{ctrl: ctrl}
	mock.recorder = &MockSlotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlotService) EXPECT() *MockSlotServiceMockRecorder {
	return m.recorder
}

// GetCurrentDayGameSlots mocks base method.
func (m *MockSlotService) GetCurrentDayGameSlots(ctx context.Context, gameID uuid.UUID) ([]entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentDayGameSlots", ctx, gameID)
	ret0, _ := ret[0].([]entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentDayGameSlots indicates an expected call of GetCurrentDayGameSlots.
func (mr *MockSlotServiceMockRecorder) GetCurrentDayGameSlots(ctx, gameID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDayGameSlots", reflect.TypeOf((*MockSlotService)(nil).GetCurrentDayGameSlots), ctx, gameID)
}

// GetSlotByID mocks base method.
func (m *MockSlotService) GetSlotByID(ctx context.Context, slotID uuid.UUID) (*entities.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotByID", ctx, slotID)
	ret0, _ := ret[0].(*entities.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotByID indicates an expected call of GetSlotByID.
func (mr *MockSlotServiceMockRecorder) GetSlotByID(ctx, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotByID", reflect.TypeOf((*MockSlotService)(nil).GetSlotByID), ctx, slotID)
}

// MarkSlotAsBooked mocks base method.
func (m *MockSlotService) MarkSlotAsBooked(ctx context.Context, slotID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSlotAsBooked", ctx, slotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSlotAsBooked indicates an expected call of MarkSlotAsBooked.
func (mr *MockSlotServiceMockRecorder) MarkSlotAsBooked(ctx, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSlotAsBooked", reflect.TypeOf((*MockSlotService)(nil).MarkSlotAsBooked), ctx, slotID)
}
