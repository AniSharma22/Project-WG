// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dell\projects2\watchguard-proj\Project-WG\play-hub\internal\domain\interfaces\service\booking_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "project2/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockBookingService is a mock of BookingService interface.
type MockBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceMockRecorder
}

// MockBookingServiceMockRecorder is the mock recorder for MockBookingService.
type MockBookingServiceMockRecorder struct {
	mock *MockBookingService
}

// NewMockBookingService creates a new mock instance.
func NewMockBookingService(ctrl *gomock.Controller) *MockBookingService {
	mock := &MockBookingService{ctrl: ctrl}
	mock.recorder = &MockBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingService) EXPECT() *MockBookingServiceMockRecorder {
	return m.recorder
}

// GetBookingByUserAndSlotID mocks base method.
func (m *MockBookingService) GetBookingByUserAndSlotID(ctx context.Context, userID, slotID uuid.UUID) (models.Bookings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByUserAndSlotID", ctx, userID, slotID)
	ret0, _ := ret[0].(models.Bookings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByUserAndSlotID indicates an expected call of GetBookingByUserAndSlotID.
func (mr *MockBookingServiceMockRecorder) GetBookingByUserAndSlotID(ctx, userID, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByUserAndSlotID", reflect.TypeOf((*MockBookingService)(nil).GetBookingByUserAndSlotID), ctx, userID, slotID)
}

// GetBookingsToUpdateResult mocks base method.
func (m *MockBookingService) GetBookingsToUpdateResult(ctx context.Context, userID uuid.UUID) ([]models.Bookings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsToUpdateResult", ctx, userID)
	ret0, _ := ret[0].([]models.Bookings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsToUpdateResult indicates an expected call of GetBookingsToUpdateResult.
func (mr *MockBookingServiceMockRecorder) GetBookingsToUpdateResult(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsToUpdateResult", reflect.TypeOf((*MockBookingService)(nil).GetBookingsToUpdateResult), ctx, userID)
}

// GetSlotBookedUsers mocks base method.
func (m *MockBookingService) GetSlotBookedUsers(ctx context.Context, slotId uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotBookedUsers", ctx, slotId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotBookedUsers indicates an expected call of GetSlotBookedUsers.
func (mr *MockBookingServiceMockRecorder) GetSlotBookedUsers(ctx, slotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotBookedUsers", reflect.TypeOf((*MockBookingService)(nil).GetSlotBookedUsers), ctx, slotId)
}

// GetUpcomingBookings mocks base method.
func (m *MockBookingService) GetUpcomingBookings(ctx context.Context, userID uuid.UUID) ([]models.Bookings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingBookings", ctx, userID)
	ret0, _ := ret[0].([]models.Bookings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingBookings indicates an expected call of GetUpcomingBookings.
func (mr *MockBookingServiceMockRecorder) GetUpcomingBookings(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingBookings", reflect.TypeOf((*MockBookingService)(nil).GetUpcomingBookings), ctx, userID)
}

// MakeBooking mocks base method.
func (m *MockBookingService) MakeBooking(ctx context.Context, userID, slotID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBooking", ctx, userID, slotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBooking indicates an expected call of MakeBooking.
func (mr *MockBookingServiceMockRecorder) MakeBooking(ctx, userID, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBooking", reflect.TypeOf((*MockBookingService)(nil).MakeBooking), ctx, userID, slotID)
}

// UpdateBookingResult mocks base method.
func (m *MockBookingService) UpdateBookingResult(ctx context.Context, bookingId uuid.UUID, result string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookingResult", ctx, bookingId, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookingResult indicates an expected call of UpdateBookingResult.
func (mr *MockBookingServiceMockRecorder) UpdateBookingResult(ctx, bookingId, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookingResult", reflect.TypeOf((*MockBookingService)(nil).UpdateBookingResult), ctx, bookingId, result)
}
