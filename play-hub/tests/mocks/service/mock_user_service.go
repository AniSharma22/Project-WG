// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\anisharma\GolandProjects\goprac\Project-WG\play-hub\internal\domain\interfaces\user_service.go

// Package mock is a generated GoMock package.
package mocks

import (
	entities "project2/internal/domain/entities"
	models "project2/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AcceptInvite mocks base method.
func (m *MockUserService) AcceptInvite(slotId primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvite", slotId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptInvite indicates an expected call of AcceptInvite.
func (mr *MockUserServiceMockRecorder) AcceptInvite(slotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvite", reflect.TypeOf((*MockUserService)(nil).AcceptInvite), slotId)
}

// AddResult mocks base method.
func (m *MockUserService) AddResult(userId primitive.ObjectID, result string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResult", userId, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResult indicates an expected call of AddResult.
func (mr *MockUserServiceMockRecorder) AddResult(userId, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResult", reflect.TypeOf((*MockUserService)(nil).AddResult), userId, result)
}

// EmailAlreadyExists mocks base method.
func (m *MockUserService) EmailAlreadyExists(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailAlreadyExists", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EmailAlreadyExists indicates an expected call of EmailAlreadyExists.
func (mr *MockUserServiceMockRecorder) EmailAlreadyExists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailAlreadyExists", reflect.TypeOf((*MockUserService)(nil).EmailAlreadyExists), email)
}

// GetAllUsersByScore mocks base method.
func (m *MockUserService) GetAllUsersByScore() ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersByScore")
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersByScore indicates an expected call of GetAllUsersByScore.
func (mr *MockUserServiceMockRecorder) GetAllUsersByScore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersByScore", reflect.TypeOf((*MockUserService)(nil).GetAllUsersByScore))
}

// GetPendingInvites mocks base method.
func (m *MockUserService) GetPendingInvites() ([]models.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInvites")
	ret0, _ := ret[0].([]models.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInvites indicates an expected call of GetPendingInvites.
func (mr *MockUserServiceMockRecorder) GetPendingInvites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInvites", reflect.TypeOf((*MockUserService)(nil).GetPendingInvites))
}

// GetUserByEmail mocks base method.
func (m *MockUserService) GetUserByEmail(email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserServiceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserService)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockUserService) GetUserById(userId primitive.ObjectID) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserService)(nil).GetUserById), userId)
}

// Login mocks base method.
func (m *MockUserService) Login(email string, password []byte) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), email, password)
}

// RejectInvite mocks base method.
func (m *MockUserService) RejectInvite(slotId primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvite", slotId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectInvite indicates an expected call of RejectInvite.
func (mr *MockUserServiceMockRecorder) RejectInvite(slotId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvite", reflect.TypeOf((*MockUserService)(nil).RejectInvite), slotId)
}

// Signup mocks base method.
func (m *MockUserService) Signup(user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserServiceMockRecorder) Signup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserService)(nil).Signup), user)
}
