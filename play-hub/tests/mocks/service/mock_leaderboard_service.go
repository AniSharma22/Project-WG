// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Dell\projects2\watchguard-proj\Project-WG\play-hub\internal\domain\interfaces\service\leaderboard_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "project2/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLeaderboardService is a mock of LeaderboardService interface.
type MockLeaderboardService struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardServiceMockRecorder
}

// MockLeaderboardServiceMockRecorder is the mock recorder for MockLeaderboardService.
type MockLeaderboardServiceMockRecorder struct {
	mock *MockLeaderboardService
}

// NewMockLeaderboardService creates a new mock instance.
func NewMockLeaderboardService(ctrl *gomock.Controller) *MockLeaderboardService {
	mock := &MockLeaderboardService{ctrl: ctrl}
	mock.recorder = &MockLeaderboardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardService) EXPECT() *MockLeaderboardServiceMockRecorder {
	return m.recorder
}

// AddLossToUser mocks base method.
func (m *MockLeaderboardService) AddLossToUser(ctx context.Context, userId, gameId, bookingId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLossToUser", ctx, userId, gameId, bookingId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLossToUser indicates an expected call of AddLossToUser.
func (mr *MockLeaderboardServiceMockRecorder) AddLossToUser(ctx, userId, gameId, bookingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLossToUser", reflect.TypeOf((*MockLeaderboardService)(nil).AddLossToUser), ctx, userId, gameId, bookingId)
}

// AddWinToUser mocks base method.
func (m *MockLeaderboardService) AddWinToUser(ctx context.Context, userId, gameId, bookingId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWinToUser", ctx, userId, gameId, bookingId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWinToUser indicates an expected call of AddWinToUser.
func (mr *MockLeaderboardServiceMockRecorder) AddWinToUser(ctx, userId, gameId, bookingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWinToUser", reflect.TypeOf((*MockLeaderboardService)(nil).AddWinToUser), ctx, userId, gameId, bookingId)
}

// GetGameLeaderboard mocks base method.
func (m *MockLeaderboardService) GetGameLeaderboard(ctx context.Context, gameId uuid.UUID) ([]models.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameLeaderboard", ctx, gameId)
	ret0, _ := ret[0].([]models.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameLeaderboard indicates an expected call of GetGameLeaderboard.
func (mr *MockLeaderboardServiceMockRecorder) GetGameLeaderboard(ctx, gameId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameLeaderboard", reflect.TypeOf((*MockLeaderboardService)(nil).GetGameLeaderboard), ctx, gameId)
}
